{"ast":null,"code":"var _jsxFileName = \"D:\\\\Dados\\\\Desktop\\\\Orcamento.app\\\\Orcamento-app\\\\frontend\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { authApi } from '../services/api';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [token, setToken] = useState(localStorage.getItem('adminToken'));\n  useEffect(() => {\n    const validateStoredToken = async () => {\n      if (token) {\n        const isValid = await authApi.validateToken();\n        if (!isValid) {\n          setToken(null);\n          localStorage.removeItem('adminToken');\n          setIsAuthenticated(false);\n        } else {\n          setIsAuthenticated(true);\n        }\n      }\n    };\n    validateStoredToken();\n  }, [token]);\n  const login = async (username, password) => {\n    try {\n      const loginRequest = {\n        username,\n        password\n      };\n      const response = await authApi.login(loginRequest);\n      if (response.success && response.token) {\n        setToken(response.token);\n        localStorage.setItem('adminToken', response.token);\n        setIsAuthenticated(true);\n        toast.success('Login successful!');\n        return true;\n      } else {\n        toast.error(response.message || 'Login failed');\n        return false;\n      }\n    } catch (error) {\n      toast.error('Login failed. Please try again.');\n      return false;\n    }\n  };\n  const logout = () => {\n    if (token) {\n      authApi.logout().catch(console.error);\n    }\n    setToken(null);\n    localStorage.removeItem('adminToken');\n    setIsAuthenticated(false);\n    toast.success('Logged out successfully');\n  };\n  const value = {\n    isAuthenticated,\n    token,\n    login,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"Wi73fEx0kFBNsOmWedckoRqHh5U=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","authApi","toast","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","isAuthenticated","setIsAuthenticated","token","setToken","localStorage","getItem","validateStoredToken","isValid","validateToken","removeItem","login","username","password","loginRequest","response","success","setItem","error","message","logout","catch","console","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["D:/Dados/Desktop/Orcamento.app/Orcamento-app/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport { AuthContextType, LoginRequest } from '../types';\r\nimport { authApi } from '../services/api';\r\nimport toast from 'react-hot-toast';\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [token, setToken] = useState<string | null>(localStorage.getItem('adminToken'));\r\n\r\n  useEffect(() => {\r\n    const validateStoredToken = async () => {\r\n      if (token) {\r\n        const isValid = await authApi.validateToken();\r\n        if (!isValid) {\r\n          setToken(null);\r\n          localStorage.removeItem('adminToken');\r\n          setIsAuthenticated(false);\r\n        } else {\r\n          setIsAuthenticated(true);\r\n        }\r\n      }\r\n    };\r\n\r\n    validateStoredToken();\r\n  }, [token]);\r\n\r\n  const login = async (username: string, password: string): Promise<boolean> => {\r\n    try {\r\n      const loginRequest: LoginRequest = { username, password };\r\n      const response = await authApi.login(loginRequest);\r\n      \r\n      if (response.success && response.token) {\r\n        setToken(response.token);\r\n        localStorage.setItem('adminToken', response.token);\r\n        setIsAuthenticated(true);\r\n        toast.success('Login successful!');\r\n        return true;\r\n      } else {\r\n        toast.error(response.message || 'Login failed');\r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      toast.error('Login failed. Please try again.');\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    if (token) {\r\n      authApi.logout().catch(console.error);\r\n    }\r\n    setToken(null);\r\n    localStorage.removeItem('adminToken');\r\n    setIsAuthenticated(false);\r\n    toast.success('Logged out successfully');\r\n  };\r\n\r\n  const value: AuthContextType = {\r\n    isAuthenticated,\r\n    token,\r\n    login,\r\n    logout\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = (): AuthContextType => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}